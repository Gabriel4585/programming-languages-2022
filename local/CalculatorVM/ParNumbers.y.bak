-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParNumbers
  ( happyError
  , myLexer
  , pExp
  , pExp1
  , pExp2
  , pQQ
  , pII
  , pNN
  , pPP
  ) where

import Prelude

import qualified AbsNumbers
import LexNumbers

}

%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pQQ QQ
%name pII II
%name pNN NN
%name pPP PP
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '/' { PT _ (TS _ 6) }
  'I' { PT _ (TS _ 7) }
  'O' { PT _ (TS _ 8) }
  'S' { PT _ (TS _ 9) }
  'T' { PT _ (TS _ 10) }

%%


Exp :: { AbsNumbers.Exp }
Exp : Exp '+' Exp1 { AbsNumbers.Plus $1 $3 } | Exp1 { $1 }

Exp1 :: { AbsNumbers.Exp }
Exp1 : Exp1 '*' Exp2 { AbsNumbers.Times $1 $3 } | Exp2 { $1 }

Exp2 :: { AbsNumbers.Exp }
Exp2 : QQ { AbsNumbers.Num $1 } | '(' Exp ')' { $2 }

QQ :: { AbsNumbers.QQ }
QQ : II '/' PP { AbsNumbers.QQ $1 $3 }

II :: { AbsNumbers.II }
II : '(' NN ',' NN ')' { AbsNumbers.II $2 $4 }

NN :: { AbsNumbers.NN }
NN : 'O' { AbsNumbers.O } | 'S' NN { AbsNumbers.S $2 }

PP :: { AbsNumbers.PP }
PP : 'I' { AbsNumbers.I } | 'T' NN { AbsNumbers.T $2 }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

