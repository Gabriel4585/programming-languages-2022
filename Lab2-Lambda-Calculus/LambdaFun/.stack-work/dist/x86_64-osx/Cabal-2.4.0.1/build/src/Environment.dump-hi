
==================== FINAL INTERFACE ====================
2019-11-21 22:26:12.216073 UTC

interface LamFun-3.14.1-1NElG62CogO50XNaLIVWxW:Environment 8064
  interface hash: 5e5d18216a6060a9a606a5b070a864dc
  ABI hash: a013418ebe9191a5a7bbf317f9caf15d
  export-list hash: 0c6697da8f9fc7e0b1f6bfcddcec4a99
  orphan hash: c16f5af5751bb092665480261d75bd64
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Environment.defargs
  Environment.define
  Environment.empty_env
  Environment.find
  Environment.make_env
  Environment.maybe_find
  Environment.names
  Environment.within
  Environment.Environment{Environment.Env}
  Environment.Ident
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 text-1.2.3.1*
orphans: text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  containers-0.6.0.1:Data.Map 9f8de07f1b4905617d1dd889549a129c
import  -/  containers-0.6.0.1:Data.Map.Internal 9e74e122af4fa0c1b8d4c844eeda9c98
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  text-1.2.3.1:Data.Text 681b9c3df5b4e4b4e23ef5f840f0b692
import  -/  text-1.2.3.1:Data.Text.Internal 537e168590e8068f673f691833f78483
4f6ffb6635f4a88ca975f7cc5ce5f942
  $sfromList ::
    [(Environment.Ident, a)]
    -> Data.Map.Internal.Map Environment.Ident a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Environment.Ident, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Environment.Ident @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Environment.Ident
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Environment.Ident @ a)
                             (Data.Map.Internal.Tip @ Environment.Ident @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Environment.$sfromList1
                                  @ a
                                  wild2
                                  (Data.Map.Internal.Bin
                                     @ Environment.Ident
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Environment.Ident @ a)
                                     (Data.Map.Internal.Tip @ Environment.Ident @ a))
                             GHC.Types.LT
                             -> Environment.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Environment.Ident
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Environment.Ident @ a)
                                     (Data.Map.Internal.Tip @ Environment.Ident @ a))
                                  wild2 } } } } } } }) -}
a6de4fedeb6dc2a06760a9428526303b
  $sfromList1 ::
    [(Environment.Ident, a)]
    -> Data.Map.Internal.Map Environment.Ident a
    -> Data.Map.Internal.Map Environment.Ident a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
ff091d7c5112c3dd75bbc7326ed0e65a
  $sinsert_$sgo13 ::
    Environment.Ident
    -> Environment.Ident
    -> a1
    -> Data.Map.Internal.Map Environment.Ident a1
    -> Data.Map.Internal.Map Environment.Ident a1
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: Environment.Ident)
                   (w1 :: Environment.Ident)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map Environment.Ident a1) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Environment.$w$sgo13 @ a1 w ww1 ww2 ww3 w2 w3 }) -}
a4e35d6c34c15c547914adc82d3c1c72
  $slookup1 ::
    Environment.Ident
    -> Data.Map.Internal.Map Environment.Ident a -> GHC.Maybe.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Environment.Ident)
                   (w1 :: Data.Map.Internal.Map Environment.Ident a) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Environment.$wpoly_go2 @ a ww1 ww2 ww3 w1 }) -}
22b079c9fe7eda4cdfd3d81fcb076ae2
  $sunion ::
    Data.Map.Internal.Map Environment.Ident a
    -> Data.Map.Internal.Map Environment.Ident a
    -> Data.Map.Internal.Map Environment.Ident a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
7800ad7c1d3addcacc4a3193f2091008
  $tc'Env :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9229296020305920568##
                   10014519470130397914##
                   Environment.$trModule
                   Environment.$tc'Env2
                   1#
                   Environment.$tc'Env1) -}
c3ebd8377c006a094c60621d2f687f68
  $tc'Env1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e6ac26247b98226f0e298350df90d943
  $tc'Env2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Environment.$tc'Env3) -}
7505abf512c5de20c6debddfb8196d9d
  $tc'Env3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Env"#) -}
5653279d8c53c52b82148d0c41734129
  $tcEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14355205018542450110##
                   8150258146703618663##
                   Environment.$trModule
                   Environment.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
5fb8a3b6aebe8b4980217a17b98dc9ff
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Environment.$trModule3
                   Environment.$trModule1) -}
7b961b08cabab494cc34d1af7630cc1a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Environment.$trModule2) -}
5731f557c9b9b381bdb690ee2549caf6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Environment"#) -}
eb1d40b333aaa21ac966feaf897287f7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Environment.$trModule4) -}
a4e5f33a9bfc4e24bfc20b9f3cc50100
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LamFun-3.14.1-1NElG62CogO50XNaLIVWxW"#) -}
04d19d1a1b419b6367bc49004ffc6a74
  $w$sgo1 ::
    Environment.Ident
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Environment.Ident a1
    -> Data.Map.Internal.Map Environment.Ident a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
8b984d3918c8497f53ba3627097365a2
  $w$sgo13 ::
    Environment.Ident
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Environment.Ident a1
    -> Data.Map.Internal.Map Environment.Ident a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
dc418eddf2d7d882b72dae004ccc66f8
  $wlvl :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int# -> v
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x, Inline: [2] -}
572cd049d52c7505590d42ac7bf83fd5
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Environment.Ident a
    -> [(Environment.Ident, a)]
    -> Data.Map.Internal.Map Environment.Ident a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
3e273799b73ebb427242b2af6d590132
  $wpoly_go13 ::
    Environment.Ident
    -> Data.Map.Internal.Map Environment.Ident a
    -> (# Data.Map.Internal.Map Environment.Ident a,
          Data.Map.Internal.Map Environment.Ident a #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,1*U>, Inline: [2] -}
fb16b8f4eaf01e1864be4599f8618198
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Environment.Ident a
    -> GHC.Maybe.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
e13f5b6e82649b359ce8c6c205fe0e45
  newtype Environment v
    = Env (Data.Map.Internal.Map Environment.Ident v)
ad9b4ece05fc4c0c239f92af5a62f139
  type Ident = Data.Text.Internal.Text
13c78ad90ea363f15b50618a76674aa4
  defargs ::
    Environment.Environment v
    -> [Environment.Ident] -> [v] -> Environment.Environment v
  {- Arity: 3, Strictness: <S,1*U><S,U><S,U>,
     Unfolding: (\ @ v
                   (env :: Environment.Environment v)
                   (fps :: [Environment.Ident])
                   (args :: [v]) ->
                 case GHC.List.$wlenAcc @ v args 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ Data.Text.Internal.Text
                        fps
                        0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> Environment.defargs2 @ v
                   1# -> Environment.defargs1 @ v fps args env } } }) -}
809d797a43027743216fc0a79c991677
  defargs1 ::
    [Data.Text.Internal.Text]
    -> [v] -> Environment.Environment v -> Environment.Environment v
  {- Arity: 3, Strictness: <S,1*U><L,1*U><S,1*U> -}
6b7a1fa7374f19bb110f089bcba20543
  defargs2 :: Environment.Environment v
  {- Strictness: x -}
4235b3d0cc4cf6a3c206a24204d24fca
  define ::
    Environment.Environment v
    -> Environment.Ident -> v -> Environment.Environment v
  {- Arity: 3, Strictness: <S,1*U><S(SSS),U(U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Environment.define1
                  `cast`
                (forall (v :: <*>_N).
                 <Environment.Environment v>_R
                 ->_R <Environment.Ident>_R
                 ->_R <v>_R
                 ->_R Sym (Environment.N:Environment[0]) <v>_N) -}
9d282a99e5d566b26a5039127f5cd030
  define1 ::
    Environment.Environment v
    -> Environment.Ident
    -> v
    -> Data.Map.Internal.Map Environment.Ident v
  {- Arity: 3, Strictness: <S,1*U><S(SSS),U(U,U,U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ v
                   (ds :: Environment.Environment v)
                   (x :: Environment.Ident)
                   (v1 :: v) ->
                 Environment.$sinsert_$sgo13
                   @ v
                   x
                   x
                   v1
                   ds `cast` (Environment.N:Environment[0] <v>_N)) -}
4260d608b8d0c6d46e2656f534cb8270
  empty_env :: Environment.Environment v
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.Tip @ Environment.Ident)
                  `cast`
                (forall (v :: <*>_N). Sym (Environment.N:Environment[0]) <v>_N) -}
578c5903352aa03524a134604c17b04f
  find :: Environment.Environment v -> Environment.Ident -> v
  {- Arity: 2, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ v
                   (ds :: Environment.Environment v)
                   (x :: Environment.Ident) ->
                 case Environment.$slookup1
                        @ v
                        x
                        ds `cast` (Environment.N:Environment[0] <v>_N) of wild {
                   GHC.Maybe.Nothing -> Environment.find1 @ v x
                   GHC.Maybe.Just v1 -> v1 }) -}
67e724c457bbef8d787eca4ba39d93a6
  find1 :: Environment.Ident -> v
  {- Arity: 1, Strictness: <B,1*U(U,U,U)>x, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ v (w :: Environment.Ident) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Environment.$wlvl @ v ww1 ww2 ww3 }) -}
75efc5bbe882be103e1c576f3413c69e
  make_env :: [(Environment.Ident, v)] -> Environment.Environment v
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Environment.$sfromList
                  `cast`
                (forall (v :: <*>_N).
                 <[(Environment.Ident, v)]>_R
                 ->_R Sym (Environment.N:Environment[0]) <v>_N) -}
e720c85ec838edd4004dd4d8c1371c1b
  maybe_find ::
    Environment.Environment v -> Environment.Ident -> GHC.Maybe.Maybe v
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ v
                   (ds :: Environment.Environment v)
                   (x :: Environment.Ident) ->
                 Environment.$slookup1
                   @ v
                   x
                   ds `cast` (Environment.N:Environment[0] <v>_N)) -}
3547e257d142efa05abcab440dab98ec
  names :: Environment.Environment v -> [Environment.Ident]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.keys @ Environment.Ident)
                  `cast`
                (forall (v :: <*>_N).
                 Sym (Environment.N:Environment[0]) <v>_N
                 ->_R <[Environment.Ident]>_R) -}
aa70b715c6de005f8aef09bf01245685
  within ::
    Environment.Environment v
    -> Environment.Environment v -> Environment.Environment v
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Environment.within1
                  `cast`
                (forall (v :: <*>_N).
                 <Environment.Environment v>_R
                 ->_R <Environment.Environment v>_R
                 ->_R Sym (Environment.N:Environment[0]) <v>_N) -}
a95778c03b4281d52857c6538e16cd39
  within1 ::
    Environment.Environment v
    -> Environment.Environment v
    -> Data.Map.Internal.Map Environment.Ident v
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ v
                   (ds :: Environment.Environment v)
                   (ds1 :: Environment.Environment v) ->
                 Environment.$sunion
                   @ v
                   ds1 `cast` (Environment.N:Environment[0] <v>_N)
                   ds `cast` (Environment.N:Environment[0] <v>_N)) -}
"SPEC/Environment fromList @ Ident _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord Environment.Ident)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = Environment.$sfromList @ a
"SPEC/Environment union @ Ident _" [orphan] forall @ a
                                                   ($dOrd :: GHC.Classes.Ord Environment.Ident)
  Data.Map.Internal.union @ Data.Text.Internal.Text @ a $dOrd
  = Environment.$sunion @ a
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

