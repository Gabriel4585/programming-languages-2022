
==================== FINAL INTERFACE ====================
2019-11-21 22:26:19.16239 UTC

interface LamFun-3.14.1-1NElG62CogO50XNaLIVWxW:Memory 8064
  interface hash: af45e14dd5e04d0fbf75ba0ecdd6301d
  ABI hash: 727fc0f3489f7310579d9be4f1dbc505
  export-list hash: 74efabe4c25efdd6d03a806612458bd4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Memory.array
  Memory.contents
  Memory.dump
  Memory.fresh
  Memory.index
  Memory.init_mem
  Memory.update
  Memory.Location{Memory.Loc}
  Memory.Memory{Memory.Mem}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0*
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  containers-0.6.0.1:Data.Map 9f8de07f1b4905617d1dd889549a129c
import  -/  containers-0.6.0.1:Data.Map.Internal 9e74e122af4fa0c1b8d4c844eeda9c98
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
2f381c2d60b459cfae2049327a76067e
  $fEqLocation :: GHC.Classes.Eq Memory.Location
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Memory.Location
                  GHC.Integer.Type.eqInteger
                    `cast`
                  (Sym (Memory.N:Location[0])
                   ->_R Sym (Memory.N:Location[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.neqInteger
                    `cast`
                  (Sym (Memory.N:Location[0])
                   ->_R Sym (Memory.N:Location[0])
                   ->_R <GHC.Types.Bool>_R) -}
2f381c2d60b459cfae2049327a76067e
  $fShowLocation :: GHC.Show.Show Memory.Location
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Memory.Location
                  Memory.$fShowLocation_$cshowsPrec
                  GHC.Show.$fShowInteger_$cshow
                    `cast`
                  (Sym (Memory.N:Location[0]) ->_R <GHC.Base.String>_R)
                  Memory.$fShowLocation_$cshowList -}
2f381c2d60b459cfae2049327a76067e
  $fShowLocation1 ::
    Memory.Location -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,U><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Memory.Location) (s :: GHC.Base.String)[OneShot] ->
                 case GHC.Show.$w$cshowsPrec4
                        0#
                        x `cast` (Memory.N:Location[0])
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Base.++_$s++ @ GHC.Types.Char s ww3 ww4 }) -}
2f381c2d60b459cfae2049327a76067e
  $fShowLocation_$cshowList :: [Memory.Location] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Memory.Location]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Memory.Location
                   Memory.$fShowLocation1
                   ls
                   s) -}
2f381c2d60b459cfae2049327a76067e
  $fShowLocation_$cshowsPrec ::
    GHC.Types.Int -> Memory.Location -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,U><L,1*U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Memory.Location)
                   (s :: GHC.Base.String) ->
                 case GHC.Show.$w$cshowsPrec4
                        0#
                        x `cast` (Memory.N:Location[0])
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Base.++_$s++ @ GHC.Types.Char s ww3 ww4 }) -}
50c0e2f6676bdc965d8dd52a818cde8e
  $sinsert_$sgo13 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> a1
    -> Data.Map.Internal.Map GHC.Integer.Type.Integer a1
    -> Data.Map.Internal.Map GHC.Integer.Type.Integer a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
7c3d03933c0c6f7bdc067af6d04e6832
  $slookup1 ::
    GHC.Integer.Type.Integer
    -> Data.Map.Internal.Map GHC.Integer.Type.Integer a
    -> GHC.Maybe.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
047faebb6379873f24613c10b18834d8
  $tc'Loc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14039738549981156600##
                   9131193648546113082##
                   Memory.$trModule
                   Memory.$tc'Loc2
                   0#
                   Memory.$tc'Loc1) -}
71aa77b7090b4b8e1000c6ca27b2ec62
  $tc'Loc1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0cf895f788cf4470dbdf2adfbb88aaa0
  $tc'Loc2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Memory.$tc'Loc3) -}
224defd6802cc38472fe9354502c1ae7
  $tc'Loc3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Loc"#) -}
2524fb7817f0bfe6cf8bd3ac38e2cc6c
  $tc'Mem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15234068511112994700##
                   16673252760674575505##
                   Memory.$trModule
                   Memory.$tc'Mem2
                   1#
                   Memory.$tc'Mem1) -}
cdfd54f510f38c2633251639033aa547
  $tc'Mem1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
008b5a711f2091e173d613ef089a4d23
  $tc'Mem2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Memory.$tc'Mem3) -}
07baadaf771dc1e17acce658316092a0
  $tc'Mem3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mem"#) -}
0a9427f7ab6b6a3aec4a1920f2732962
  $tcLocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10980000740369098033##
                   88909811941265579##
                   Memory.$trModule
                   Memory.$tcLocation1
                   0#
                   GHC.Types.krep$*) -}
ad250c4b96db0ff7f217c7c132da5618
  $tcLocation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Memory.$tcLocation2) -}
2e580b819808fef09045a93f985f23be
  $tcLocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Location"#) -}
f02dea30c8ec011d0ae3fe4229f8c783
  $tcMemory :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   820678000761020145##
                   7423955340486682669##
                   Memory.$trModule
                   Memory.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
20cfef2d6bda15f66fb4d63eda8470e6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Memory.$trModule3
                   Memory.$trModule1) -}
266fdbc79c319660f337e45a53b06cfa
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Memory.$trModule2) -}
bfc7d1f06d7c127c2cd6517f999e3386
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Memory"#) -}
5efc1779a935ed23c5e1ae343f0226c0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Memory.$trModule4) -}
4cfab6f43e5cb85ed75f1104b31f1a64
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LamFun-3.14.1-1NElG62CogO50XNaLIVWxW"#) -}
d6c1ae6c7c4796a3698cac7107ca3e19
  $wcontents ::
    Data.Map.Internal.Map GHC.Integer.Type.Integer (GHC.Maybe.Maybe a)
    -> Memory.Location -> a
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2],
     Unfolding: (\ @ a
                   (ww :: Data.Map.Internal.Map
                            GHC.Integer.Type.Integer (GHC.Maybe.Maybe a))
                   (w :: Memory.Location) ->
                 case Memory.$slookup1
                        @ (GHC.Maybe.Maybe a)
                        w `cast` (Memory.N:Location[0])
                        ww of wild {
                   GHC.Maybe.Nothing -> Memory.contents2 @ a w
                   GHC.Maybe.Just ds
                   -> case ds of wild1 {
                        GHC.Maybe.Nothing -> Memory.contents1 @ a w
                        GHC.Maybe.Just v -> v } }) -}
c22a8e75d703dac26f6d2c2691daf744
  $wdump ::
    GHC.Show.Show a =>
    Data.Map.Internal.Map GHC.Integer.Type.Integer (GHC.Maybe.Maybe a)
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: Data.Map.Internal.Map
                            GHC.Integer.Type.Integer (GHC.Maybe.Maybe a)) ->
                 GHC.Show.showList__
                   @ (GHC.Integer.Type.Integer, GHC.Maybe.Maybe a)
                   (\ (w3 :: (GHC.Integer.Type.Integer, GHC.Maybe.Maybe a))
                      (w4 :: GHC.Base.String)[OneShot] ->
                    case w3 of ww1 { (,) ww2 ww3 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)4
                      (case GHC.Show.$w$cshowsPrec4
                              0#
                              ww2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo1
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                                    (GHC.Show.$fShowMaybe_$cshowsPrec @ a w GHC.Show.$fShow(,)1 ww3)
                                    (GHC.Types.[] @ GHC.Show.ShowS))) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 }) })
                   (Data.Map.Internal.$fDataMap_go
                      @ GHC.Integer.Type.Integer
                      @ (GHC.Maybe.Maybe a)
                      (GHC.Types.[] @ (GHC.Integer.Type.Integer, GHC.Maybe.Maybe a))
                      ww)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2f381c2d60b459cfae2049327a76067e
  newtype Location = Loc GHC.Integer.Type.Integer
07c3e51dbaa32b738834427c26d42961
  newtype Memory a
    = Mem (GHC.Integer.Type.Integer,
           Data.Map.Internal.Map GHC.Integer.Type.Integer (GHC.Maybe.Maybe a))
2e6136f78ea81c5bf288fcc12b43dced
  array ::
    Memory.Memory a
    -> GHC.Integer.Type.Integer -> (Memory.Location, Memory.Memory a)
  {- Arity: 2, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: Memory.Memory a) (k :: GHC.Integer.Type.Integer) ->
                 case ds `cast` (Memory.N:Memory[0] <a>_R) of wild { (,) n s ->
                 (n `cast` (Sym (Memory.N:Location[0])),
                  (GHC.Integer.Type.plusInteger n k, s)
                    `cast`
                  (Sym (Memory.N:Memory[0] <a>_R))) }) -}
8c6ae1647e344647b6bd06682fe13837
  contents :: Memory.Memory a -> Memory.Location -> a
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Memory.Memory a) (w1 :: Memory.Location) ->
                 case w `cast` (Memory.N:Memory[0] <a>_R) of ww { (,) ww1 ww2 ->
                 Memory.$wcontents @ a ww2 w1 }) -}
cb596b2c45dc811bac641e2ae5f432a8
  contents1 :: Memory.Location -> a
  {- Arity: 1, Strictness: <B,U>x -}
e4c1bb9196301fa877590db62a0056c8
  contents2 :: Memory.Location -> a
  {- Arity: 1, Strictness: <B,U>x -}
ae90464754ac9317f9a3366d974996f1
  dump :: GHC.Show.Show a => Memory.Memory a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S(LS),1*U(A,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Show.Show a) (w1 :: Memory.Memory a) ->
                 case w1 `cast` (Memory.N:Memory[0] <a>_R) of ww { (,) ww1 ww2 ->
                 Memory.$wdump @ a w ww2 }) -}
65dcead5ff3218139f3d97f8695defdf
  fresh :: Memory.Memory a -> (Memory.Location, Memory.Memory a)
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Memory.Memory a) ->
                 case w `cast` (Memory.N:Memory[0] <a>_R) of ww { (,) ww1 ww2 ->
                 (ww1 `cast` (Sym (Memory.N:Location[0])),
                  (GHC.Integer.Type.plusInteger ww1 Memory.fresh1,
                   Memory.$sinsert_$sgo13
                     @ (GHC.Maybe.Maybe a)
                     ww1
                     ww1
                     (GHC.Maybe.Nothing @ a)
                     ww2)
                    `cast`
                  (Sym (Memory.N:Memory[0] <a>_R))) }) -}
d6fff4116795bddae6a9529a224b82d6
  fresh1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7ef678b33069bf663c60eb5d33d700e5
  index ::
    Memory.Memory a
    -> Memory.Location -> GHC.Integer.Type.Integer -> Memory.Location
  {- Arity: 3, Strictness: <L,A><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Memory.index1
                  `cast`
                (forall (a :: <*>_N).
                 <Memory.Memory a>_R
                 ->_R <Memory.Location>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R Sym (Memory.N:Location[0])) -}
c6cff526cfce12ee4f5305c92bde1acb
  index1 ::
    Memory.Memory a
    -> Memory.Location
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <L,A><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (mem :: Memory.Memory a)
                   (ds :: Memory.Location)
                   (i :: GHC.Integer.Type.Integer) ->
                 GHC.Integer.Type.plusInteger ds `cast` (Memory.N:Location[0]) i) -}
64bb8213cc25e38c4747ccea8bce4ecd
  init_mem :: Memory.Memory a
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memory.init_mem1
                  `cast`
                (forall (a :: <*>_N). Sym (Memory.N:Memory[0] <a>_R)) -}
11fb1d6dc7cea8c92e2958fb5607d32d
  init_mem1 ::
    (GHC.Integer.Type.Integer,
     Data.Map.Internal.Map GHC.Integer.Type.Integer (GHC.Maybe.Maybe a))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (Memory.init_mem2,
                  Data.Map.Internal.Tip
                    @ GHC.Integer.Type.Integer
                    @ (GHC.Maybe.Maybe a))) -}
9113a3d50c66c474cb2c07093406c33e
  init_mem2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
9abad30cb0dc4a604f045c16afe3aae0
  update ::
    Memory.Memory a -> Memory.Location -> a -> Memory.Memory a
  {- Arity: 3, Strictness: <S(LS),1*U(U,U)><S,U><L,U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: Memory.Memory a) (w1 :: Memory.Location) (w2 :: a) ->
                 case w `cast` (Memory.N:Memory[0] <a>_R) of ww { (,) ww1 ww2 ->
                 case Memory.$slookup1
                        @ (GHC.Maybe.Maybe a)
                        w1 `cast` (Memory.N:Location[0])
                        ww2 of wild {
                   GHC.Maybe.Nothing -> Memory.update1 @ a w1
                   GHC.Maybe.Just ds
                   -> (ww1,
                       Memory.$sinsert_$sgo13
                         @ (GHC.Maybe.Maybe a)
                         w1 `cast` (Memory.N:Location[0])
                         w1 `cast` (Memory.N:Location[0])
                         (GHC.Maybe.Just @ a w2)
                         ww2)
                        `cast`
                      (Sym (Memory.N:Memory[0] <a>_R)) } }) -}
0ab9903fe87ee122fbf9ef28206dd5b7
  update1 :: Memory.Location -> Memory.Memory a
  {- Arity: 1, Strictness: <B,U>x -}
instance [safe] GHC.Classes.Eq [Memory.Location]
  = Memory.$fEqLocation
instance [safe] GHC.Show.Show [Memory.Location]
  = Memory.$fShowLocation
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

